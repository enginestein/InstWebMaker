import { useState, useCallback } from 'react';
import { Element, ElementStyle } from '@/components/elements/ElementTypes';
import { useBuilder } from '@/context/BuilderContext';

export function useElementActions() {
  const { updateElement, removeElement, selectElement, selectedElement } = useBuilder();
  
  // Update content of an element
  const updateContent = useCallback((id: string, content: string) => {
    updateElement(id, { content });
  }, [updateElement]);
  
  // Update style of an element
  const updateStyle = useCallback((id: string, style: Partial<ElementStyle>) => {
    updateElement(id, { 
      style: { 
        ...selectedElement?.style, 
        ...style 
      } 
    });
  }, [updateElement, selectedElement]);
  
  // Update attributes of an element
  const updateAttributes = useCallback((id: string, attributes: Record<string, string>) => {
    updateElement(id, { 
      attributes: { 
        ...selectedElement?.attributes, 
        ...attributes 
      } 
    });
  }, [updateElement, selectedElement]);
  
  // Duplicate an element
  const duplicateElement = useCallback((element: Element) => {
    if (!element) return;
    
    // Create a duplicate with new ID
    const duplicate = {
      ...element,
      id: undefined, // ID will be generated by addElement
    };
    
    // TODO: Add duplicate action to builder context
  }, []);
  
  // Delete an element
  const deleteElement = useCallback((id: string) => {
    removeElement(id);
  }, [removeElement]);
  
  return {
    updateContent,
    updateStyle,
    updateAttributes,
    duplicateElement,
    deleteElement,
  };
}
